{"version":3,"sources":["Components/SearchBar/SearchBar.js","Components/TweetsList/Tweet/Tweet.js","Components/TweetsList/TweetsList.js","Components/Graphs/Chart.js","Components/TabMenu/TabMenu.js","Components/QueryTweets/QueryTweet.js","Components/TopMenu/TopMenu.js","App.js","reportWebVitals.js","index.js"],"names":["SearchBar","props","useState","query","setQuery","Form","onSubmit","onClickSearch","loading","loadingAPIResponse","className","Input","required","placeholder","onChange","event","target","value","type","Icon","name","Tweet","hashtags","length","map","hashtag","List","Item","Content","Header","href","id","Description","created_at","favourite_count","text","vader","bow","TweetsList","APIresponse","tweets","selection","divided","verticalAlign","tweet","author_name","App","data","x","y","data2","labelData","d","idx","Math","max","xType","height","style","position","left","top","orientation","items","title","color","Component","TabPanel","children","index","other","role","hidden","aria-labelledby","Box","p","Typography","a11yProps","useStyles","makeStyles","theme","root","backgroundColor","palette","background","paper","FullWidthTabs","classes","useTheme","React","setValue","AppBar","Tabs","newValue","indicatorColor","textColor","variant","aria-label","Tab","label","axis","direction","onChangeIndex","dir","showAPIResponse","Chart","QueryTweet","setData","setLoadingAPIResponse","setShowAPIResponse","fetch","then","response","json","fetchTweets","TopMenu","Breadcrumb","size","Divider","Section","active","Container","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.c50ed976.chunk.js","sourcesContent":["import React, { useState} from 'react'\r\nimport { Form, Icon, Input } from 'semantic-ui-react'\r\n\r\nconst SearchBar = (props) => {\r\n\r\n    const [query, setQuery] = useState('')\r\n\r\n    const onChangeHandler = (event) => {\r\n        setQuery(event.target.value)\r\n    }\r\n\r\n    //add loading property when loading results and action={{ icon: 'search' }} onClickSearch\r\n    return (\r\n        <Form onSubmit={() => props.onClickSearch(query)} loading={props.loadingAPIResponse}>\r\n            <div className=\"teste\">\r\n                <Input\r\n                    required\r\n                    placeholder='Machine Learning, Artificial Intelligence, Programming...'\r\n                    onChange={onChangeHandler} />\r\n                <button type=\"submit\" className=\"buttontest\"><Icon name=\"search\" /></button>\r\n\r\n            </div>\r\n        </Form>\r\n    )\r\n}\r\n\r\nexport default SearchBar","import React from 'react'\r\nimport { Button, List } from 'semantic-ui-react'\r\n\r\nconst Tweet = (props) => {\r\n    let hashtags = null\r\n    if(props.hashtags.length>0){\r\n      hashtags = <h4>Hashtags: {props.hashtags.map(hashtag => <div className=\"hashtag\">#{hashtag} </div>)}</h4>\r\n    }\r\n    return(\r\n        <List.Item>\r\n        <List.Content>\r\n            <List.Header>{props.name} <a target=\"blank\" href={\"https://twitter.com/user/status/\"+ props.id}>Visit</a></List.Header>\r\n            <List.Description>Created at: {props.created_at} - Liked by {props.favourite_count}</List.Description>\r\n            <p></p>\r\n            <p>{props.text}</p>\r\n            <h4>\r\n              <p>Classification Vader: {props.vader}</p> \r\n              <p>Classification BOW: {props.bow}</p>\r\n            </h4>\r\n            {hashtags}\r\n        </List.Content>\r\n      </List.Item>\r\n    )\r\n}\r\n\r\nexport default Tweet","import React from \"react\"\r\nimport { List } from 'semantic-ui-react'\r\nimport Tweet from \"./Tweet/Tweet\"\r\nimport \"./TweetsList.css\"\r\n\r\nconst TweetsList = (props) => {\r\n\r\n    return (\r\n        <div className=\"TweetsList\" >\r\n            <h1>Tweets</h1>\r\n            <p>Showing {props.APIresponse.tweets.length} results</p>\r\n            <p>Results for query: {props.APIresponse.query}</p>\r\n            <List selection divided verticalAlign='middle'>\r\n                {props.APIresponse.tweets.map(tweet => {\r\n                    return <Tweet\r\n                        name={tweet.author_name}\r\n                        key={tweet.id}\r\n                        id={tweet.id}\r\n                        created_at={tweet.created_at}\r\n                        text={tweet.text}\r\n                        vader = {tweet.vader}\r\n                        bow = {tweet.bow}\r\n                        hashtags={tweet.hashtags}\r\n                        favourite_count={tweet.favourite_count}\r\n                    />\r\n                })}\r\n            </List>\r\n        </div>\r\n\r\n    )\r\n}\r\n\r\nexport default TweetsList","import '../../../node_modules/react-vis/dist/style.css';\r\n\r\n\r\nimport React, { Component } from 'react';\r\n\r\nimport {XYPlot, VerticalGridLines, HorizontalGridLines, XAxis, YAxis, VerticalBarSeries, LabelSeries,\r\n  FlexibleWidthXYPlot,  DiscreteColorLegend } from 'react-vis';\r\n\r\n\r\nclass App extends Component {\r\n  \r\n  render() {\r\n    const data = [\r\n      {x: 'Positive', y: 10},\r\n      {x: 'Negative', y: 5},\r\n      {x: 'Neutral', y: 15}\r\n    ];\r\n    const data2 = [\r\n      {x: 'Positive', y: 3},\r\n      {x: 'Negative', y: 25},\r\n      {x: 'Neutral', y: 8}\r\n    ];\r\n    const labelData = data.map((d, idx) => ({\r\n      x: d.x,\r\n      y: Math.max(data[idx].y, data2[idx].y)\r\n    }));\r\n    return (\r\n      <div className=\"App\">\r\n        <FlexibleWidthXYPlot xType=\"ordinal\" height={500} >\r\n        <DiscreteColorLegend\r\n            style={{position: 'absolute', left: '50px', top: '20px'}}\r\n            orientation=\"horizontal\"\r\n            items={[\r\n              {\r\n                title: 'Vader',\r\n                color: '#12939A'\r\n              },\r\n              {\r\n                title: 'BOW',\r\n                color: '#79C7E3'\r\n              }\r\n            ]}\r\n          />\r\n        <XAxis />\r\n        <YAxis />\r\n        <VerticalBarSeries  data={data} />\r\n        <VerticalBarSeries  data={data2} />\r\n        <VerticalGridLines />\r\n        <HorizontalGridLines />\r\n        </FlexibleWidthXYPlot>\r\n        <LabelSeries data={labelData} />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport SwipeableViews from 'react-swipeable-views';\r\nimport { makeStyles, useTheme } from '@material-ui/core/styles';\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport Tabs from '@material-ui/core/Tabs';\r\nimport Tab from '@material-ui/core/Tab';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Box from '@material-ui/core/Box';\r\n\r\nimport TweetsList from \"../TweetsList/TweetsList\"\r\nimport Chart from \"../Graphs/Chart\"\r\n\r\nfunction TabPanel(props) {\r\n  const { children, value, index, ...other } = props;\r\n\r\n  return (\r\n    <div\r\n      role=\"tabpanel\"\r\n      hidden={value !== index}\r\n      id={`full-width-tabpanel-${index}`}\r\n      aria-labelledby={`full-width-tab-${index}`}\r\n      {...other}\r\n    >\r\n      {value === index && (\r\n        <Box p={3}>\r\n          <Typography>{children}</Typography>\r\n        </Box>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nTabPanel.propTypes = {\r\n  children: PropTypes.node,\r\n  index: PropTypes.any.isRequired,\r\n  value: PropTypes.any.isRequired,\r\n};\r\n\r\nfunction a11yProps(index) {\r\n  return {\r\n    id: `full-width-tab-${index}`,\r\n    'aria-controls': `full-width-tabpanel-${index}`,\r\n  };\r\n}\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    backgroundColor: theme.palette.background.paper,\r\n  },\r\n}));\r\n\r\nexport default function FullWidthTabs(props) {\r\n  const classes = useStyles();\r\n  const theme = useTheme();\r\n  const [value, setValue] = React.useState(0);\r\n\r\n  const handleChange = (event, newValue) => {\r\n    setValue(newValue);\r\n  };\r\n\r\n  const handleChangeIndex = (index) => {\r\n    setValue(index);\r\n  };\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n      <AppBar position=\"static\" color=\"default\">\r\n        <Tabs\r\n          value={value}\r\n          onChange={handleChange}\r\n          indicatorColor=\"primary\"\r\n          textColor=\"primary\"\r\n          variant=\"fullWidth\"\r\n          aria-label=\"full width tabs example\"\r\n        >\r\n          <Tab label=\"Tweets\" {...a11yProps(0)} />\r\n          <Tab label=\"Distribution\" {...a11yProps(1)} />\r\n        </Tabs>\r\n      </AppBar>\r\n      <SwipeableViews\r\n        axis={theme.direction === 'rtl' ? 'x-reverse' : 'x'}\r\n        index={value}\r\n        onChangeIndex={handleChangeIndex}\r\n      >\r\n        <TabPanel value={value} index={0} dir={theme.direction}>\r\n          {props.showAPIResponse ? <TweetsList APIresponse={props.data} /> : <p>Enter items on search bar</p>}\r\n        </TabPanel>\r\n        <TabPanel value={value} index={1} dir={theme.direction}>\r\n          {props.showAPIResponse ? <Chart/>: <p>Enter items on search bar</p>}\r\n        </TabPanel>\r\n      </SwipeableViews>\r\n    </div>\r\n  );\r\n}","import React, { useState } from 'react'\r\nimport SearchBar from \"../SearchBar/SearchBar\"\r\nimport TabMenu from \"../TabMenu/TabMenu\"\r\n\r\nconst QueryTweet = (props) => {\r\n\r\n    const [data, setData] = useState({ tweets: [] })\r\n    const [loadingAPIResponse, setLoadingAPIResponse] = useState(false)\r\n    const [showAPIResponse, setShowAPIResponse] = useState(false)\r\n\r\n    const fetchTweets = (query) => {\r\n        fetch(`https://tweet-analysis-app.herokuapp.com/api/tweets?query=${query}`).then(response => response.json().then(data => {\r\n            setShowAPIResponse(true)\r\n            setData(data)\r\n            setLoadingAPIResponse(false)\r\n        }))\r\n    }\r\n\r\n    const RequestAPIHandler = (query) => {\r\n        setLoadingAPIResponse(true)\r\n        fetchTweets(query)\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <SearchBar loadingAPIResponse={loadingAPIResponse} onClickSearch={RequestAPIHandler} />\r\n            <TabMenu data={data} showAPIResponse={showAPIResponse}></TabMenu>\r\n        </div>)\r\n}\r\n\r\nexport default QueryTweet","import React from 'react'\r\nimport { Breadcrumb } from 'semantic-ui-react'\r\nimport \"./TopMenu.css\"\r\n\r\nconst TopMenu = (props) => {\r\n\r\n  return (\r\n    <div className=\"TopMenu\">\r\n      <Breadcrumb className=\"Breadcrumb\" size=\"huge\">\r\n        <a href='https://adriellemoraes.com/' >Home</a>\r\n        <Breadcrumb.Divider />\r\n        <Breadcrumb.Section active>Tweets</Breadcrumb.Section>\r\n      </Breadcrumb>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default TopMenu","import React from \"react\"\nimport QueryTweets from \"./Components/QueryTweets/QueryTweet\"\nimport TopMenu from \"./Components/TopMenu/TopMenu\"\nimport { Container } from 'semantic-ui-react'\n\nfunction App() {\n  return (\n    <div>\n      <TopMenu/>\n      <Container><QueryTweets/></Container>\n      \n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport 'semantic-ui-css/semantic.min.css'\nimport \"./customize.css\"\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}